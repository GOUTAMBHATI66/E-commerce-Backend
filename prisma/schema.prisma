generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Category {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  parentId      String?    @map("parentId") @db.ObjectId
  parent        Category?  @relation("SubCategories", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  subcategories Category[] @relation("SubCategories")
  products      Product[]
}

model Seller {
  id                 String     @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String     @unique
  contact            String?
  googleId           String     @unique
  shiprocketEmail    String?
  shiprocketPassword String?
  shipRocketToken    String?
  products           Product[]
  Delivery           Delivery[]
  SubOrder           SubOrder[]
}

model Product {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  price       Float
  slug        String  @unique //for the seo purpose

  totalQuantity   Int           @default(0)
  status          ProductStatus @default(active)
  isDeleted       Boolean       @default(false)
  isPublished     Boolean       @default(false)
  isFeatured      Boolean?      @default(false)
  discountPercent Float?
  // product variants

  variants Variant[]

  // Relations
  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id])

  sellerId String @db.ObjectId
  seller   Seller @relation(fields: [sellerId], references: [id])

  // time and update
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  OrderItem OrderItem[]

  @@index([categoryId])
  @@index([sellerId])
}

// variant and attributes
model Variant {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  color      String // E.g., "Red", "Blue", etc.
  images     String[] // Images for this color
  attributes Attribute[]
  productId  String      @db.ObjectId
  product    Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  OrderItem  OrderItem[]

  @@index([productId])
}

model Attribute {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  size      String // E.g., "M", "L", "XL"
  stock     Int // Specific stock level for this size
  price     Float? // Optional: Overrides base price for this size
  sku       String? // Optional: SKU for inventory tracking
  variantId String      @db.ObjectId
  variant   Variant     @relation(fields: [variantId], references: [id], onDelete: Cascade)
  OrderItem OrderItem[]

  @@index([variantId])
}

model User {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  // phone     String    @unique
  googleId  String    @unique
  addresses Address[]
  orders    Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Address {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  street      String
  city        String
  state       String
  postalCode  String
  country     String
  phoneNumber String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Order {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  paymentMethod     PaymentMethod  @default(COD)
  razorpayOrderId   String?
  razorpayPaymentId String?
  status            PaymentStatus  @default(PENDING)
  totalAmount       Float
  // orderItems        OrderItem[]
  deliveryStatus    DeliveryStatus @default(PENDING)

  shippingAddressId String          @db.ObjectId
  shippingAddress   ShippingAddress @relation(fields: [shippingAddressId], references: [id])

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  SubOrder  SubOrder[]
}

model SubOrder {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  parentOrderId  String         @db.ObjectId
  parentOrder    Order          @relation(fields: [parentOrderId], references: [id], onDelete: Cascade)
  sellerId       String         @db.ObjectId
  seller         Seller         @relation(fields: [sellerId], references: [id])
  orderItems     OrderItem[]
  totalAmount    Float
  paymentMethod  PaymentMethod  @default(ONLINE) // Payment status specific to the suborder
  deliveryStatus DeliveryStatus @default(PENDING) // Delivery status specific to the suborder
  paymentStatus  PaymentStatus  @default(PENDING)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  Delivery       Delivery[]

  @@index([parentOrderId])
}

model OrderItem {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  productId   String     @db.ObjectId
  product     Product    @relation(fields: [productId], references: [id])
  variantId   String?    @db.ObjectId
  variant     Variant?   @relation(fields: [variantId], references: [id])
  attributeId String?    @db.ObjectId
  attribute   Attribute? @relation(fields: [attributeId], references: [id])
  quantity    Int        @default(1)
  price       Float
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  subOrderId  String     @db.ObjectId
  SubOrder    SubOrder   @relation(fields: [subOrderId], references: [id], onDelete: Cascade)

  @@index([subOrderId])
}

model ShippingAddress {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  street      String
  city        String
  state       String
  postalCode  String
  country     String
  phoneNumber String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Order       Order[]
}

// product delivery model
model Delivery {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  subOrderId String   @db.ObjectId
  subOrder   SubOrder @relation(fields: [subOrderId], references: [id], onDelete: Cascade)

  sellerId String @db.ObjectId
  seller   Seller @relation(fields: [sellerId], references: [id])

  deliveryService   String // e.g., "Shiprocket"
  shipmentId        String // From Shiprocket's `shipment_id`
  channelOrderId    String // From Shiprocket's `channel_order_id`
  deliveryStatus    String
  estimatedDelivery DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// Enum for product status
enum ProductStatus {
  active
  inactive
  out_of_stock
  discontinued
}

enum PaymentMethod {
  COD
  ONLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum DeliveryStatus {
  PENDING
  SHIPPED
  OUT_FOR_DELIVERY
  DELIVERED
}
